// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import 'features/forecast/infrastructure/datasource/local/location/object_box_location.dart';
import 'features/forecast/infrastructure/datasource/local/weather/object_box_weather_forecast.dart';
import 'features/settings/infrastructure/datasource/local/object_box_app_settings.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 9125949422073348728),
      name: 'ObjectBoxLocation',
      lastPropertyId: const IdUid(5, 5236280699431084206),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7398228767862623833),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 6690278694582810254),
            name: 'city',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 5632263878752466236),
            name: 'country',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 631243391326687542),
            name: 'longitude',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 5236280699431084206),
            name: 'latitude',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 6212453888631272785),
      name: 'ObjectBoxAppSettings',
      lastPropertyId: const IdUid(2, 726139462921129666),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 4043919296113677854),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 726139462921129666),
            name: 'dbTemneperatureUnit',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 1039612676162057545),
      name: 'ObjectBoxWeatherForecast',
      lastPropertyId: const IdUid(9, 8832047683115825392),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5972013789064078143),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 1886362165129983394),
            name: 'locationCity',
            type: 9,
            flags: 2048,
            indexId: const IdUid(2, 4815851846597109858)),
        ModelProperty(
            id: const IdUid(3, 4014428803183240231),
            name: 'locationCountry',
            type: 9,
            flags: 2048,
            indexId: const IdUid(3, 6091263129775128174)),
        ModelProperty(
            id: const IdUid(4, 1425296046277089776),
            name: 'locationLatitude',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2047689844826122064),
            name: 'locationLongitude',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 5727823546004472709),
            name: 'requestedAt',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 8056422148052862328),
            name: 'currentTemperature',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 3522748079909155030),
            name: 'currentHumidity',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(9, 8832047683115825392),
            name: 'currentWeatherCode',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[
        ModelBacklink(
            name: 'dailyWeatherConditions',
            srcEntity: 'ObjectBoxDailyWeatherCondition',
            srcField: 'weatherForecast')
      ]),
  ModelEntity(
      id: const IdUid(4, 8106077178139549717),
      name: 'ObjectBoxDailyWeatherCondition',
      lastPropertyId: const IdUid(8, 8661005664592360444),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 5016881945616182658),
            name: 'id',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3287904746127091141),
            name: 'weatherForecastId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 1378844084698189371),
            relationTarget: 'ObjectBoxWeatherForecast'),
        ModelProperty(
            id: const IdUid(3, 7933655648428254790),
            name: 'date',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 8717493502034414371),
            name: 'minimumTemperature',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 2577105487913570131),
            name: 'maximumTemperature',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(6, 6337432173757324790),
            name: 'precipitation',
            type: 8,
            flags: 0),
        ModelProperty(
            id: const IdUid(7, 5184799208535818042),
            name: 'precipitationProbability',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(8, 8661005664592360444),
            name: 'weatherCode',
            type: 6,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Shortcut for [Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [Store.new] for an explanation of all parameters.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// Returns the ObjectBox model definition for this project for use with
/// [Store.new].
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(4, 8106077178139549717),
      lastIndexId: const IdUid(3, 6091263129775128174),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    ObjectBoxLocation: EntityDefinition<ObjectBoxLocation>(
        model: _entities[0],
        toOneRelations: (ObjectBoxLocation object) => [],
        toManyRelations: (ObjectBoxLocation object) => {},
        getId: (ObjectBoxLocation object) => object.id,
        setId: (ObjectBoxLocation object, int id) {
          object.id = id;
        },
        objectToFB: (ObjectBoxLocation object, fb.Builder fbb) {
          final cityOffset =
              object.city == null ? null : fbb.writeString(object.city!);
          final countryOffset =
              object.country == null ? null : fbb.writeString(object.country!);
          fbb.startTable(6);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, cityOffset);
          fbb.addOffset(2, countryOffset);
          fbb.addFloat64(3, object.longitude);
          fbb.addFloat64(4, object.latitude);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ObjectBoxLocation()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..city = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..country = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..longitude = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 10)
            ..latitude = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 12);

          return object;
        }),
    ObjectBoxAppSettings: EntityDefinition<ObjectBoxAppSettings>(
        model: _entities[1],
        toOneRelations: (ObjectBoxAppSettings object) => [],
        toManyRelations: (ObjectBoxAppSettings object) => {},
        getId: (ObjectBoxAppSettings object) => object.id,
        setId: (ObjectBoxAppSettings object, int id) {
          object.id = id;
        },
        objectToFB: (ObjectBoxAppSettings object, fb.Builder fbb) {
          fbb.startTable(3);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.dbTemneperatureUnit);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ObjectBoxAppSettings()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..dbTemneperatureUnit =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 6);

          return object;
        }),
    ObjectBoxWeatherForecast: EntityDefinition<ObjectBoxWeatherForecast>(
        model: _entities[2],
        toOneRelations: (ObjectBoxWeatherForecast object) => [],
        toManyRelations: (ObjectBoxWeatherForecast object) => {
              RelInfo<ObjectBoxDailyWeatherCondition>.toOneBacklink(
                  2,
                  object.id,
                  (ObjectBoxDailyWeatherCondition srcObject) =>
                      srcObject.weatherForecast): object.dailyWeatherConditions
            },
        getId: (ObjectBoxWeatherForecast object) => object.id,
        setId: (ObjectBoxWeatherForecast object, int id) {
          object.id = id;
        },
        objectToFB: (ObjectBoxWeatherForecast object, fb.Builder fbb) {
          final locationCityOffset = object.locationCity == null
              ? null
              : fbb.writeString(object.locationCity!);
          final locationCountryOffset = object.locationCountry == null
              ? null
              : fbb.writeString(object.locationCountry!);
          fbb.startTable(10);
          fbb.addInt64(0, object.id);
          fbb.addOffset(1, locationCityOffset);
          fbb.addOffset(2, locationCountryOffset);
          fbb.addFloat64(3, object.locationLatitude);
          fbb.addFloat64(4, object.locationLongitude);
          fbb.addInt64(5, object.requestedAt?.millisecondsSinceEpoch);
          fbb.addFloat64(6, object.currentTemperature);
          fbb.addInt64(7, object.currentHumidity);
          fbb.addInt64(8, object.currentWeatherCode);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final requestedAtValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 14);
          final object = ObjectBoxWeatherForecast()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..locationCity = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 6)
            ..locationCountry = const fb.StringReader(asciiOptimization: true)
                .vTableGetNullable(buffer, rootOffset, 8)
            ..locationLatitude = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 10)
            ..locationLongitude = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 12)
            ..requestedAt = requestedAtValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(requestedAtValue)
            ..currentTemperature = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 16)
            ..currentHumidity =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 18)
            ..currentWeatherCode = const fb.Int64Reader()
                .vTableGetNullable(buffer, rootOffset, 20);
          InternalToManyAccess.setRelInfo<ObjectBoxWeatherForecast>(
              object.dailyWeatherConditions,
              store,
              RelInfo<ObjectBoxDailyWeatherCondition>.toOneBacklink(
                  2,
                  object.id,
                  (ObjectBoxDailyWeatherCondition srcObject) =>
                      srcObject.weatherForecast));
          return object;
        }),
    ObjectBoxDailyWeatherCondition: EntityDefinition<
            ObjectBoxDailyWeatherCondition>(
        model: _entities[3],
        toOneRelations: (ObjectBoxDailyWeatherCondition object) =>
            [object.weatherForecast],
        toManyRelations: (ObjectBoxDailyWeatherCondition object) => {},
        getId: (ObjectBoxDailyWeatherCondition object) => object.id,
        setId: (ObjectBoxDailyWeatherCondition object, int id) {
          object.id = id;
        },
        objectToFB: (ObjectBoxDailyWeatherCondition object, fb.Builder fbb) {
          fbb.startTable(9);
          fbb.addInt64(0, object.id);
          fbb.addInt64(1, object.weatherForecast.targetId);
          fbb.addInt64(2, object.date?.millisecondsSinceEpoch);
          fbb.addFloat64(3, object.minimumTemperature);
          fbb.addFloat64(4, object.maximumTemperature);
          fbb.addFloat64(5, object.precipitation);
          fbb.addInt64(6, object.precipitationProbability);
          fbb.addInt64(7, object.weatherCode);
          fbb.finish(fbb.endTable());
          return object.id;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);
          final dateValue =
              const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 8);
          final object = ObjectBoxDailyWeatherCondition()
            ..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0)
            ..date = dateValue == null
                ? null
                : DateTime.fromMillisecondsSinceEpoch(dateValue)
            ..minimumTemperature = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 10)
            ..maximumTemperature = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 12)
            ..precipitation = const fb.Float64Reader()
                .vTableGetNullable(buffer, rootOffset, 14)
            ..precipitationProbability =
                const fb.Int64Reader().vTableGetNullable(buffer, rootOffset, 16)
            ..weatherCode = const fb.Int64Reader()
                .vTableGetNullable(buffer, rootOffset, 18);
          object.weatherForecast.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 6, 0);
          object.weatherForecast.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [ObjectBoxLocation] entity fields to define ObjectBox queries.
class ObjectBoxLocation_ {
  /// see [ObjectBoxLocation.id]
  static final id =
      QueryIntegerProperty<ObjectBoxLocation>(_entities[0].properties[0]);

  /// see [ObjectBoxLocation.city]
  static final city =
      QueryStringProperty<ObjectBoxLocation>(_entities[0].properties[1]);

  /// see [ObjectBoxLocation.country]
  static final country =
      QueryStringProperty<ObjectBoxLocation>(_entities[0].properties[2]);

  /// see [ObjectBoxLocation.longitude]
  static final longitude =
      QueryDoubleProperty<ObjectBoxLocation>(_entities[0].properties[3]);

  /// see [ObjectBoxLocation.latitude]
  static final latitude =
      QueryDoubleProperty<ObjectBoxLocation>(_entities[0].properties[4]);
}

/// [ObjectBoxAppSettings] entity fields to define ObjectBox queries.
class ObjectBoxAppSettings_ {
  /// see [ObjectBoxAppSettings.id]
  static final id =
      QueryIntegerProperty<ObjectBoxAppSettings>(_entities[1].properties[0]);

  /// see [ObjectBoxAppSettings.dbTemneperatureUnit]
  static final dbTemneperatureUnit =
      QueryIntegerProperty<ObjectBoxAppSettings>(_entities[1].properties[1]);
}

/// [ObjectBoxWeatherForecast] entity fields to define ObjectBox queries.
class ObjectBoxWeatherForecast_ {
  /// see [ObjectBoxWeatherForecast.id]
  static final id = QueryIntegerProperty<ObjectBoxWeatherForecast>(
      _entities[2].properties[0]);

  /// see [ObjectBoxWeatherForecast.locationCity]
  static final locationCity =
      QueryStringProperty<ObjectBoxWeatherForecast>(_entities[2].properties[1]);

  /// see [ObjectBoxWeatherForecast.locationCountry]
  static final locationCountry =
      QueryStringProperty<ObjectBoxWeatherForecast>(_entities[2].properties[2]);

  /// see [ObjectBoxWeatherForecast.locationLatitude]
  static final locationLatitude =
      QueryDoubleProperty<ObjectBoxWeatherForecast>(_entities[2].properties[3]);

  /// see [ObjectBoxWeatherForecast.locationLongitude]
  static final locationLongitude =
      QueryDoubleProperty<ObjectBoxWeatherForecast>(_entities[2].properties[4]);

  /// see [ObjectBoxWeatherForecast.requestedAt]
  static final requestedAt = QueryIntegerProperty<ObjectBoxWeatherForecast>(
      _entities[2].properties[5]);

  /// see [ObjectBoxWeatherForecast.currentTemperature]
  static final currentTemperature =
      QueryDoubleProperty<ObjectBoxWeatherForecast>(_entities[2].properties[6]);

  /// see [ObjectBoxWeatherForecast.currentHumidity]
  static final currentHumidity = QueryIntegerProperty<ObjectBoxWeatherForecast>(
      _entities[2].properties[7]);

  /// see [ObjectBoxWeatherForecast.currentWeatherCode]
  static final currentWeatherCode =
      QueryIntegerProperty<ObjectBoxWeatherForecast>(
          _entities[2].properties[8]);
}

/// [ObjectBoxDailyWeatherCondition] entity fields to define ObjectBox queries.
class ObjectBoxDailyWeatherCondition_ {
  /// see [ObjectBoxDailyWeatherCondition.id]
  static final id = QueryIntegerProperty<ObjectBoxDailyWeatherCondition>(
      _entities[3].properties[0]);

  /// see [ObjectBoxDailyWeatherCondition.weatherForecast]
  static final weatherForecast = QueryRelationToOne<
      ObjectBoxDailyWeatherCondition,
      ObjectBoxWeatherForecast>(_entities[3].properties[1]);

  /// see [ObjectBoxDailyWeatherCondition.date]
  static final date = QueryIntegerProperty<ObjectBoxDailyWeatherCondition>(
      _entities[3].properties[2]);

  /// see [ObjectBoxDailyWeatherCondition.minimumTemperature]
  static final minimumTemperature =
      QueryDoubleProperty<ObjectBoxDailyWeatherCondition>(
          _entities[3].properties[3]);

  /// see [ObjectBoxDailyWeatherCondition.maximumTemperature]
  static final maximumTemperature =
      QueryDoubleProperty<ObjectBoxDailyWeatherCondition>(
          _entities[3].properties[4]);

  /// see [ObjectBoxDailyWeatherCondition.precipitation]
  static final precipitation =
      QueryDoubleProperty<ObjectBoxDailyWeatherCondition>(
          _entities[3].properties[5]);

  /// see [ObjectBoxDailyWeatherCondition.precipitationProbability]
  static final precipitationProbability =
      QueryIntegerProperty<ObjectBoxDailyWeatherCondition>(
          _entities[3].properties[6]);

  /// see [ObjectBoxDailyWeatherCondition.weatherCode]
  static final weatherCode =
      QueryIntegerProperty<ObjectBoxDailyWeatherCondition>(
          _entities[3].properties[7]);
}
